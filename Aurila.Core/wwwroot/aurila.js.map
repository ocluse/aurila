{
  "version": 3,
  "sources": ["../Scripts/components/scroll-box.ts", "../Scripts/components/text-field.ts", "../Scripts/components/pull-to-refresh-box.ts", "../Scripts/index.ts"],
  "sourcesContent": ["import { ElementScrollValues } from '../models/element-scroll-values';\r\nimport { DotNetObject } from '../common';\r\nimport { ScrollOrientation } from '../enums';\r\n\r\nexport class ScrollBox {\r\n    private element: HTMLElement | null;\r\n    private dotNetObjRef: DotNetObject | null;\r\n    private throttleMilliseconds: number;\r\n    private orientation: ScrollOrientation;\r\n    private isThrottled: boolean = false;\r\n    private triedScrollWhileThrottled: boolean = false;\r\n    private timeoutId: number | null = null;\r\n\r\n    private boundScrollHandler: () => void;\r\n\r\n    constructor(\r\n        element: HTMLElement,\r\n        dotNetObjRef: DotNetObject,\r\n        throttleMilliseconds: number,\r\n        orientation: ScrollOrientation\r\n    ) {\r\n        this.element = element;\r\n        this.dotNetObjRef = dotNetObjRef;\r\n        this.throttleMilliseconds = throttleMilliseconds;\r\n        this.orientation = orientation;\r\n\r\n        this.boundScrollHandler = this.handleScroll.bind(this);\r\n        this.setElement(element);\r\n    }\r\n\r\n    public setElement(element: HTMLElement | null): void {\r\n        if (this.element) {\r\n            this.element.removeEventListener('scroll', this.boundScrollHandler);\r\n        }\r\n        this.element = element;\r\n        if (this.element) {\r\n            this.element.addEventListener('scroll', this.boundScrollHandler);\r\n        }\r\n    }\r\n\r\n    private handleScroll(): void {\r\n        if (this.isThrottled) {\r\n            this.triedScrollWhileThrottled = true;\r\n            return;\r\n        }\r\n\r\n        this.isThrottled = true;\r\n        this.notifyScrollChanged();\r\n\r\n        this.timeoutId = window.setTimeout(() => {\r\n            this.isThrottled = false;\r\n            if (this.triedScrollWhileThrottled) {\r\n                this.triedScrollWhileThrottled = false;\r\n                this.notifyScrollChanged();\r\n            }\r\n        }, this.throttleMilliseconds);\r\n    }\r\n\r\n    private notifyScrollChanged(): void {\r\n        if (!this.element || !this.dotNetObjRef) return;\r\n\r\n        const scrollValues: ElementScrollValues = {\r\n            scrollTop: this.element.scrollTop,\r\n            scrollLeft: this.element.scrollLeft,\r\n            scrollHeight: this.element.scrollHeight,\r\n            scrollWidth: this.element.scrollWidth,\r\n            clientHeight: this.element.clientHeight,\r\n            clientWidth: this.element.clientWidth,\r\n        };\r\n\r\n        this.dotNetObjRef.invokeMethodAsync('HandleScrollFromJS', scrollValues).catch(error => {\r\n            console.error('Error invoking C# scroll handler:', error);\r\n        });\r\n    }\r\n\r\n    // --- Methods callable from C# ---\r\n\r\n    public scrollToPosition(positionPx: number): void {\r\n        if (!this.element) return;\r\n\r\n        if (this.orientation === ScrollOrientation.Vertical) {\r\n            this.element.scrollTop = positionPx;\r\n        } else {\r\n            this.element.scrollLeft = positionPx;\r\n        }\r\n\r\n        this.notifyScrollChanged();\r\n    }\r\n\r\n    public scrollToEnd(isVertical: boolean): void {\r\n        if (!this.element) return;\r\n\r\n        if (isVertical) {\r\n            this.element.scrollTop = this.element.scrollHeight - this.element.clientHeight;\r\n        } else {\r\n            this.element.scrollLeft = this.element.scrollWidth - this.element.clientWidth;\r\n        }\r\n\r\n        this.notifyScrollChanged();\r\n    }\r\n\r\n    public scrollToStart(isVertical: boolean): void {\r\n        if (!this.element) return;\r\n\r\n        if (isVertical) {\r\n            this.element.scrollTop = 0;\r\n        } else {\r\n            this.element.scrollLeft = 0;\r\n        }\r\n\r\n        this.notifyScrollChanged();\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.element) {\r\n            this.element.removeEventListener('scroll', this.boundScrollHandler);\r\n        }\r\n        if (this.timeoutId !== null) {\r\n            clearTimeout(this.timeoutId);\r\n        }\r\n        this.element = null;\r\n        this.dotNetObjRef = null;\r\n    }\r\n}", "export class TextField {\r\n    private element: HTMLTextAreaElement | null;\r\n    private maxLines: number;\r\n    private boundAdjustHeight: () => void;\r\n\r\n    constructor(element: HTMLTextAreaElement, maxLines: number) {\r\n        this.element = element;\r\n        this.maxLines = maxLines;\r\n\r\n        this.boundAdjustHeight = this.adjustHeight.bind(this);\r\n        this.element.addEventListener('input', this.boundAdjustHeight);\r\n    }\r\n\r\n    private adjustHeight(): void {\r\n        if (!this.element) return;\r\n\r\n        const maxHeight = this.getLineHeight() * this.maxLines;\r\n\r\n        this.element.style.height = 'auto';\r\n        const newHeight = Math.min(this.element.scrollHeight, maxHeight);\r\n\r\n        this.element.style.height = `${newHeight}px`;\r\n        this.element.style.overflowY = newHeight >= maxHeight ? 'auto' : 'hidden';\r\n    }\r\n\r\n    public setMaxLines(maxLines: number): void {\r\n        this.maxLines = maxLines;\r\n        this.adjustHeight();\r\n    }\r\n\r\n    private getLineHeight(): number {\r\n        if (!this.element) return 24;\r\n        const style = getComputedStyle(this.element);\r\n        return parseFloat(style.lineHeight) || 24;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.element) {\r\n            this.element.removeEventListener('input', this.boundAdjustHeight);\r\n            this.element = null;\r\n        }\r\n    }\r\n}\r\n", "import { DotNetObject } from \"../common\";\r\n\r\nexport class PullToRefreshBox {\r\n    private contentElement: HTMLElement | null = null;\r\n    private parentElement: HTMLElement | null = null;\r\n    private peekElement: HTMLElement | null = null;\r\n    private dotNetObj: DotNetObject;\r\n    private startY: number = 0;\r\n    private isRefreshing: boolean = false;\r\n    private threshold: number = 50;\r\n    private timeThreshold: number = 300; // ms\r\n    private startTime: number = 0;\r\n\r\n    private boundTouchStart: (event: TouchEvent) => void;\r\n    private boundTouchMove: (event: TouchEvent) => void;\r\n    private boundTouchEnd: (event: TouchEvent) => void;\r\n\r\n    constructor(contentElement: HTMLElement, dotNetObj: DotNetObject) {\r\n        this.dotNetObj = dotNetObj;\r\n\r\n        this.boundTouchStart = this.handleTouchStart.bind(this);\r\n        this.boundTouchMove = this.handleTouchMove.bind(this);\r\n        this.boundTouchEnd = this.handleTouchEnd.bind(this);\r\n\r\n        this.setElement(contentElement);\r\n    }\r\n\r\n    private handleTouchStart(event: TouchEvent): void {\r\n        if (!this.contentElement) return;\r\n\r\n        const scrollTop = this.contentElement.scrollTop;\r\n\r\n        if (scrollTop === 0) {\r\n            this.startY = event.touches[0].pageY;\r\n            this.startTime = Date.now();\r\n        }\r\n    }\r\n\r\n    private handleTouchMove(event: TouchEvent): void {\r\n        if (!this.contentElement || !this.parentElement || !this.startY || this.isRefreshing) return;\r\n\r\n        const currentY = event.touches[0].pageY;\r\n        const deltaY = currentY - this.startY;\r\n        const scrollTop = this.contentElement.scrollTop;\r\n\r\n        if (deltaY > 0 && scrollTop === 0) {\r\n            const pullAmount = Math.min(deltaY, this.threshold);\r\n            const progress = Math.min(deltaY / this.threshold, 1);\r\n\r\n            this.parentElement.style.setProperty('--pull-distance', `${pullAmount}px`);\r\n            this.parentElement.style.setProperty('--pull-progress', `${progress}`);\r\n\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    private handleTouchEnd(event: TouchEvent): void {\r\n        if (!this.startY || this.isRefreshing || !this.parentElement) return;\r\n\r\n        const deltaY = event.changedTouches[0].pageY - this.startY;\r\n        const duration = Date.now() - this.startTime;\r\n\r\n        this.parentElement.style.setProperty('--pull-distance', '0px');\r\n        this.parentElement.style.setProperty('--pull-progress', '0');\r\n\r\n        if (deltaY > this.threshold && duration >= this.timeThreshold) {\r\n            this.isRefreshing = true;\r\n            this.dotNetObj.invokeMethodAsync('HandleRefresh')\r\n                .finally(() => {\r\n                    this.isRefreshing = false;\r\n                });\r\n        }\r\n\r\n        this.startY = 0;\r\n    }\r\n\r\n    public setElement(contentElement: HTMLElement): void {\r\n        if (this.contentElement === contentElement) return;\r\n\r\n        this.dispose();\r\n\r\n        this.contentElement = contentElement;\r\n        this.parentElement = contentElement.parentElement;\r\n\r\n        if (this.contentElement) {\r\n            this.parentElement?.style.setProperty('--pull-distance', '0px');\r\n            this.parentElement?.style.setProperty('--pull-progress', '0');\r\n\r\n            this.contentElement.addEventListener('touchstart', this.boundTouchStart);\r\n            this.contentElement.addEventListener('touchmove', this.boundTouchMove);\r\n            this.contentElement.addEventListener('touchend', this.boundTouchEnd);\r\n        }\r\n\r\n        this.peekElement = this.contentElement.previousElementSibling as HTMLElement | null;\r\n\r\n        if (this.peekElement) {\r\n            const peekHeight = this.peekElement.offsetHeight;\r\n            if (peekHeight > this.threshold) {\r\n                this.threshold = peekHeight;\r\n            }\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.contentElement) {\r\n            this.contentElement.removeEventListener('touchstart', this.boundTouchStart);\r\n            this.contentElement.removeEventListener('touchmove', this.boundTouchMove);\r\n            this.contentElement.removeEventListener('touchend', this.boundTouchEnd);\r\n            this.contentElement.style.transform = '';\r\n            this.contentElement.style.transition = '';\r\n        }\r\n\r\n        this.isRefreshing = false;\r\n        this.startY = 0;\r\n    }\r\n}", "import { DotNetObject } from \"./common\";\r\nimport { ScrollOrientation } from \"./enums\";\r\nimport { ScrollBox } from \"./components/scroll-box\";\r\nimport { TextField } from \"./components/text-field\"; \r\nimport { PullToRefreshBox } from \"./components/pull-to-refresh-box\";\r\n\r\nexport function createScrollBox(\r\n    element: HTMLElement,\r\n    dotNetObject: DotNetObject,\r\n    throttleMs: number,\r\n    orientation: ScrollOrientation\r\n): ScrollBox {\r\n    return new ScrollBox(element, dotNetObject, throttleMs, orientation);\r\n}\r\n\r\nexport function createPullToRefreshBox(\r\n    contentElement: HTMLElement,\r\n    dotNetObject: DotNetObject,\r\n): PullToRefreshBox {\r\n    return new PullToRefreshBox(contentElement, dotNetObject);\r\n}\r\n\r\nexport function createTextField(\r\n    element: HTMLTextAreaElement,\r\n    maxLines: number\r\n): TextField {\r\n    return new TextField(element, maxLines);\r\n}"],
  "mappings": "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",
  "names": ["ScrollBox", "element", "dotNetObjRef", "throttleMilliseconds", "orientation", "scrollValues", "error", "positionPx", "isVertical", "TextField", "element", "maxLines", "maxHeight", "newHeight", "style", "PullToRefreshBox", "contentElement", "dotNetObj", "event", "deltaY", "scrollTop", "pullAmount", "progress", "duration", "peekHeight", "createScrollBox", "element", "dotNetObject", "throttleMs", "orientation", "ScrollBox", "createPullToRefreshBox", "contentElement", "PullToRefreshBox", "createTextField", "maxLines", "TextField"]
}
